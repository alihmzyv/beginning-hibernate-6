package org.alihmzyv.chapter1.jdbc;

import org.alihmzyv.chapter1.jdbc.entity.MessageEntity;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;


public class JdbcPersistenceTest {
    Connection getConnection() throws SQLException {
        return DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "password");
    }

    @BeforeEach
    public void setup() {
        final String DROP = "DROP TABLE IF EXISTS messages";
        final String CREATE = "CREATE TABLE messages ("
                + "id BIGINT GENERATED BY DEFAULT AS IDENTITY "
                + "PRIMARY KEY, "
                + "text VARCHAR(256) NOT NULL)";
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps =
                         connection.prepareStatement(DROP)) {
                ps.execute();
            }
            try (PreparedStatement ps =
                         connection.prepareStatement(CREATE)) {
                ps.execute();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
    }

    public MessageEntity saveMessage(String text) {
        final String INSERT = "INSERT INTO messages(text) VALUES (?)";
        MessageEntity message = null;
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps =
                         connection.prepareStatement(INSERT,
                                 Statement.RETURN_GENERATED_KEYS)) {
                ps.setString(1, text);
                ps.execute();
                ResultSet keys = ps.getGeneratedKeys();
                try (keys) {
                    if (!keys.next()) {
                        throw new SQLException("No generated keys");
                    }
                    message = new MessageEntity(keys.getLong(1), text);
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        return message;
    }

    @Test
    public void readMessage() {
        final String text = "Hello, World!";
        MessageEntity message = saveMessage(text);
        final String SELECT = "SELECT id, text FROM messages";
        List<MessageEntity> list = new ArrayList<>();
        try (Connection connection = getConnection()) {
            try (PreparedStatement ps =
                         connection.prepareStatement(SELECT)) {
                try (ResultSet rs = ps.executeQuery()) {
                    while (rs.next()) {
                        MessageEntity newMessage = new MessageEntity();
                        newMessage.setId(rs.getLong(1));
                        newMessage.setText(rs.getString(2));
                        list.add(message);
                    }
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException(e);
        }
        assertEquals(list.size(), 1);
        for (MessageEntity m : list) {
            System.out.println(m);
        }
        assertEquals(list.get(0), message);
    }
}